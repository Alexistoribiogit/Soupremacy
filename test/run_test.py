import subprocess
import os
import sys
import webbrowser

# Analyse manuelle de couverture par fichier
def analyse_manuelle():
    print("\nüìä ANALYSE MANUELLE DE COUVERTURE :")

    rapports = {
        "employer.py": {
            "couverture": "100%",
            "non_test√©": "Aucun",
            "remarques": "Tous les cas (y compris erreurs) sont test√©s ‚úÖ"
        },
        "tracteur.py": {
            "couverture": "~100%",
            "non_test√©": "est_disponible() (pas directement)",
            "remarques": "Couvert via l‚Äôattribut .disponible"
        },
        "champ.py": {
            "couverture": "99%",
            "non_test√©": "test_champ_stockable() est vide",
            "remarques": "Tous les comportements cl√©s sont test√©s"
        },
        "legume.py": {
            "couverture": "Enum (indirect)",
            "non_test√©": "Aucun",
            "remarques": "Enum bien utilis√©e dans tous les tests"
        },
        "strategy.py": {
            "couverture": "~95%",
            "non_test√©": "print(), usage unique de Legume.PATATE",
            "remarques": "Bonne logique test√©e, test console non fait"
        },
        "sample_player_client.py": {
            "couverture": "80%+",
            "non_test√©": "Boucle infinie r√©elle, lecture r√©seau non simul√©e sur plusieurs tours",
            "remarques": "Test√© via mocks. Bonne couverture unitaire des m√©thodes principales."
        }
    }

    for fichier, infos in rapports.items():
        print(f"\nüìÅ {fichier}")
        print(f"   üîπ Couverture : {infos['couverture']}")
        print(f"   üî∏ Non test√©  : {infos['non_test√©']}")
        print(f"   üìù Remarques  : {infos['remarques']}")

# Fonction d'ex√©cution d'une commande
def run_command(command, description):
    print(f"\nüì¶ {description}")
    print(">>>", " ".join(command))
    result = subprocess.run(command, shell=True)
    if result.returncode != 0:
        print(f"‚ùå √âchec de : {description}")
        sys.exit(result.returncode)
    print(f"‚úÖ {description} termin√© avec succ√®s.")

# Script principal
def run_tests():
    os.environ["PYTHONPATH"] = os.getcwd()

    # √âtape 1 : Tests avec couverture
    run_command(
        ["python", "-m", "pytest", "--cov=.", "--cov-config=setup.cfg", "test/"],
        "Lancement des tests avec couverture"
    )

    # √âtape 2 : V√©rification du seuil
    run_command(
        ["coverage", "report", "--fail-under=80"],
        "V√©rification de la couverture (‚â• 80%)"
    )

    # √âtape 3 : Rapport HTML
    run_command(
        ["coverage", "html"],
        "G√©n√©ration du rapport HTML de couverture"
    )

    # √âtape 4 : Analyse manuelle
    analyse_manuelle()

    # √âtape 5 : Ouvrir le rapport dans le navigateur
    index_path = os.path.abspath("htmlcov/index.html")
    print(f"\nüåê Ouverture du rapport HTML : {index_path}")
    webbrowser.open(f"file://{index_path}")

if __name__ == "__main__":
    run_tests()
